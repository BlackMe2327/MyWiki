"use strict";(self.webpackChunkmy_wiki=self.webpackChunkmy_wiki||[]).push([[8054],{3905:(e,n,a)=>{a.d(n,{Zo:()=>s,kt:()=>c});var t=a(7294);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=t.createContext({}),u=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},s=function(e){var n=u(e.components);return t.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),h=u(a),c=l,f=h["".concat(p,".").concat(c)]||h[c]||d[c]||r;return a?t.createElement(f,i(i({ref:n},s),{},{components:a})):t.createElement(f,i({ref:n},s))}));function c(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=h;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=a[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}h.displayName="MDXCreateElement"},4372:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var t=a(7462),l=(a(7294),a(3905));const r={},i="HashMap\u7684put\u65b9\u6cd5\u7684\u5177\u4f53\u6d41\u7a0b",o={unversionedId:"Language/java/HashMap\u7684put\u65b9\u6cd5\u5177\u4f53\u6d41\u7a0b",id:"Language/java/HashMap\u7684put\u65b9\u6cd5\u5177\u4f53\u6d41\u7a0b",title:"HashMap\u7684put\u65b9\u6cd5\u7684\u5177\u4f53\u6d41\u7a0b",description:"image-20220319205353476",source:"@site/docs/Language/java/HashMap\u7684put\u65b9\u6cd5\u5177\u4f53\u6d41\u7a0b.md",sourceDirName:"Language/java",slug:"/Language/java/HashMap\u7684put\u65b9\u6cd5\u5177\u4f53\u6d41\u7a0b",permalink:"/MyWiki/zh-Hans/docs/Language/java/HashMap\u7684put\u65b9\u6cd5\u5177\u4f53\u6d41\u7a0b",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Language/java/HashMap\u7684put\u65b9\u6cd5\u5177\u4f53\u6d41\u7a0b.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"HashMap\u6b7b\u5faa\u73af\u95ee\u9898",permalink:"/MyWiki/zh-Hans/docs/Language/java/HashMap\u6b7b\u5faa\u73af\u95ee\u9898"},next:{title:"HashMap\u89e3\u51b3Hash\u51b2\u7a81",permalink:"/MyWiki/zh-Hans/docs/Language/java/HashMap\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81"}},p={},u=[{value:"\u5bf9\u5916\u66b4\u9732\u7684put\u65b9\u6cd5",id:"\u5bf9\u5916\u66b4\u9732\u7684put\u65b9\u6cd5",level:2},{value:"putVal\u65b9\u6cd5",id:"putval\u65b9\u6cd5",level:2},{value:"\u7ea2\u9ed1\u6811\u7684\u6570\u636e\u7ed3\u6784",id:"\u7ea2\u9ed1\u6811\u7684\u6570\u636e\u7ed3\u6784",level:2},{value:"putTreeVal()\u65b9\u6cd5",id:"puttreeval\u65b9\u6cd5",level:2},{value:"treeifyBin()\u65b9\u6cd5",id:"treeifybin\u65b9\u6cd5",level:2},{value:"resize()\u65b9\u6cd5",id:"resize\u65b9\u6cd5",level:2}],s={toc:u};function d(e){let{components:n,...a}=e;return(0,l.kt)("wrapper",(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"hashmap\u7684put\u65b9\u6cd5\u7684\u5177\u4f53\u6d41\u7a0b"},"HashMap\u7684put\u65b9\u6cd5\u7684\u5177\u4f53\u6d41\u7a0b"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://github.com/BlackMe2327/cloudimages27/blob/main/img/image-20220319205353476.png?raw=true",alt:"image-20220319205353476"})),(0,l.kt)("h2",{id:"\u5bf9\u5916\u66b4\u9732\u7684put\u65b9\u6cd5"},"\u5bf9\u5916\u66b4\u9732\u7684put\u65b9\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"/**\n* \u5bf9\u5916\u66b4\u9732\u7684put\u65b9\u6cd5\n**/\npublic V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\n")),(0,l.kt)("h2",{id:"putval\u65b9\u6cd5"},"putVal\u65b9\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"final V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict) \n{\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    //\u5982\u679cmap\u4e3a\u7a7a,\u5219\u505a\u521d\u59cb\u5316\uff0ctable\u662fmap\u4e2d\u5b58\u653e\u7d22\u5f15\u7684\u8868\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    //\u4f7f\u7528hash\u4e0e\u6570\u7ec4\u957f\u5ea6\u51cf\u4e00\u7684\u503c\u8fdb\u884c\u5f02\u6216\u5f97\u5230\u5206\u6563\u7684\u6570\u7ec4\u4e0b\u6807\uff0c\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u6ca1\u6709\u503c\uff0c\u65b0\u5efak-v\u8282\u70b9\u5b58\u653e\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    //\u8d70\u5230else\u8fd9\u91cc\u8bf4\u660e\u51fa\u73b0\u4e86\u54c8\u5e0c\u51b2\u7a81\uff0c\u9700\u8981\u5904\u7406\u54c8\u5e0c\u51b2\u7a81\u518d\u5b58\u653e\n    else {\n        Node<K,V> e; K k;\n        //p\u4e3a\u4e0a\u9762\u53d1\u751f\u78b0\u649e\u7684\u90a3\u4e2a\u8282\u70b9\uff0c\u4f5c\u6bd4\u8f83\u540e\u5c06p\u7528\u4e34\u65f6\u8282\u70b9e\u4fdd\u5b58\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        //\u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u7ea2\u9ed1\u6811\u8282\u70b9\uff0c\u5219\u7279\u6b8a\u5904\u7406\uff0c\u5982\u679c\u662f\u6811\uff0c\u8bf4\u660e\u78b0\u649e\u5df2\u7ecf\u5f00\u59cb\uff0c\u540e\u5e8f\u6570\u636e\u7ed3\u6784\u90fd\u662f\u6811\u4e0d\u662f\u94fe\u8868\n        else if (p instanceof TreeNode)\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        //key\u4e0d\u5b58\u5728\u4e14\u4e0d\u662f\u7ea2\u9ed1\u6811\u8282\u70b9\uff0c\u5219\u5f00\u59cb\u904d\u5386\u94fe\u8868\n        else {\n            for (int binCount = 0; ; ++binCount) {\n                //\u5982\u679c\u5f53\u524d\u78b0\u649e\u8282\u70b9\u6ca1\u6709\u540e\u5e8f\u8282\u70b9\uff0c\u5219\u76f4\u63a5\u65b0\u5efa\u8282\u70b9\u5e76\u8ffd\u52a0\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    //\u8ffd\u52a0\u7684\u94fe\u8868\u957f\u5ea6\u5927\u4e8e8\uff0c\u90a3\u4e48\u9700\u8981\u91cd\u65b0\u8bc4\u4f30\u5f53\u524d\u662f\u6269\u5145\u6570\u7ec4\u8fd8\u662f\u5c06\u94fe\u8868\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811\u6765\u5b58\u50a8\n                    //TREEIFY_THRESHOLD\u7b49\u4e8e8\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                //\u627e\u5230\u78b0\u649e\u8282\u70b9\uff0ckey\u5b8c\u5168\u76f8\u7b49\u7684\u8282\u70b9\uff0c\u5219\u7528\u65b0\u8282\u70b9\u66ff\u6362\u8001\u8282\u70b9\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        //\u6b64\u65f6\u7684e\u662f\u4fdd\u5b58\u7684\u88ab\u78b0\u649e\u7684\u90a3\u4e2a\u8282\u70b9\uff0c\u5373\u8001\u8282\u70b9\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n             // onlyIfAbsent\u662f\u65b9\u6cd5\u7684\u8c03\u7528\u53c2\u6570\uff0c\u8868\u793a\u662f\u5426\u66ff\u6362\u5df2\u5b58\u5728\u7684\u503c\uff0c\n             // \u5728\u9ed8\u8ba4\u7684put\u65b9\u6cd5\u4e2d\u8fd9\u4e2a\u503c\u662ffalse\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f1a\u7528\u65b0\u503c\u66ff\u6362\u65e7\u503c\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    // map\u53d8\u66f4\u6027\u64cd\u4f5c\u8ba1\u6570\u5668\n    // \u6bd4\u5982map\u7ed3\u6784\u5316\u7684\u53d8\u66f4\u50cf\u5185\u5bb9\u589e\u51cf\u6216\u8005rehash\uff0c\u8fd9\u5c06\u76f4\u63a5\u5bfc\u81f4\u5916\u90e8map\u7684\u5e76\u53d1\n    // \u8fed\u4ee3\u5f15\u8d77fail-fast\u95ee\u9898\uff0c\u8be5\u503c\u5c31\u662f\u6bd4\u8f83\u7684\u57fa\u7840\n    ++modCount;\n    // size\u5373map\u4e2d\u5305\u62eck-v\u6570\u91cf\u7684\u591a\u5c11\n    // \u5f53map\u4e2d\u7684\u5185\u5bb9\u5927\u5c0f\u5df2\u7ecf\u89e6\u53ca\u5230\u6269\u5bb9\u9608\u503c\u65f6\uff0c\u5219\u9700\u8981\u6269\u5bb9\u4e86\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n")),(0,l.kt)("h2",{id:"\u7ea2\u9ed1\u6811\u7684\u6570\u636e\u7ed3\u6784"},"\u7ea2\u9ed1\u6811\u7684\u6570\u636e\u7ed3\u6784"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"static final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {\n        TreeNode<K,V> parent;  // red-black tree links\n        TreeNode<K,V> left;\n        TreeNode<K,V> right;\n        TreeNode<K,V> prev;    // needed to unlink next upon deletion\n        boolean red;\n}\n")),(0,l.kt)("h2",{id:"puttreeval\u65b9\u6cd5"},"putTreeVal()\u65b9\u6cd5"),(0,l.kt)("p",null,"\u5f53\u5b58\u50a8\u503c",(0,l.kt)("strong",{parentName:"p"},"\u53d1\u751f\u78b0\u649e"),"\uff0c\u5e76\u5728\u5f53\u524d\u8282\u70b9\u5df2\u7ecf\u5ef6\u7533\u5230\u6811\u65f6\uff0c\u5c06\u6267\u884cputTreeVal\u65b9\u6cd5\uff0c\u91cc\u9762\u63cf\u8ff0\u4e86\u7ea2\u9ed1\u6811\u5b58\u50a8\u503c\u7684\u8ba1\u7b97\u65b9\u6cd5\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"}," final TreeNode<K,V> putTreeVal(HashMap<K,V> map, Node<K,V>[] tab,int h, K k, V v) {\n     Class<?> kc = null;\n     boolean searched = false;\n     TreeNode<K,V> root = (parent != null) ? root() : this;\n     for (TreeNode<K,V> p = root;;) {\n         int dir, ph; K pk;\n         if ((ph = p.hash) > h)\n             dir = -1;\n         else if (ph < h)\n             dir = 1;\n         else if ((pk = p.key) == k || (k != null && k.equals(pk)))\n             return p;\n         else if ((kc == null &&\n                   (kc = comparableClassFor(k)) == null) ||\n                  (dir = compareComparables(kc, k, pk)) == 0) {\n             if (!searched) {\n                 TreeNode<K,V> q, ch;\n                 searched = true;\n                 if (((ch = p.left) != null &&\n                      (q = ch.find(h, k, kc)) != null) ||\n                     ((ch = p.right) != null &&\n                      (q = ch.find(h, k, kc)) != null))\n                     return q;\n             }\n             dir = tieBreakOrder(k, pk);\n         }\n\n         TreeNode<K,V> xp = p;\n         if ((p = (dir <= 0) ? p.left : p.right) == null) {\n             Node<K,V> xpn = xp.next;\n             TreeNode<K,V> x = map.newTreeNode(h, k, v, xpn);\n             if (dir <= 0)\n                 xp.left = x;\n             else\n                 xp.right = x;\n             xp.next = x;\n             x.parent = x.prev = xp;\n             if (xpn != null)\n                 ((TreeNode<K,V>)xpn).prev = x;\n             moveRootToFront(tab, balanceInsertion(root, x));\n             return null;\n         }\n     }\n }\n")),(0,l.kt)("h2",{id:"treeifybin\u65b9\u6cd5"},"treeifyBin()\u65b9\u6cd5"),(0,l.kt)("p",null,"\u5728\u503c\u53d1\u751f\u78b0\u649e\u5e76\u9700\u8981\u5ef6\u7eed\u8ffd\u52a0\u65f6\uff0c\u5982\u679c\u8ffd\u52a0\u7684",(0,l.kt)("strong",{parentName:"p"},"\u94fe\u8868\u957f\u5ea6\u5927\u4e8e8"),"\uff0c\u90a3\u4e48",(0,l.kt)("strong",{parentName:"p"},"\u9700\u8981treeifyBin()\u65b9\u6cd5\u91cd\u65b0\u8bc4\u4f30\u5f53\u524d\u662f\u6269\u5145\u6570\u7ec4\u8fd8\u662f\u5c06\u94fe\u8868\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811\u6765\u5b58\u50a8"),"\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"final void treeifyBin(Node<K,V>[] tab, int hash) {\n    int n, index; Node<K,V> e;\n    if (tab == null || (n = tab.length) < MIN_TREEIFY_CAPACITY)\n        resize();\n    else if ((e = tab[index = (n - 1) & hash]) != null) {\n        TreeNode<K,V> hd = null, tl = null;\n        do {\n            TreeNode<K,V> p = replacementTreeNode(e, null);\n            if (tl == null)\n                hd = p;\n            else {\n                p.prev = tl;\n                tl.next = p;\n            }\n            tl = p;\n        } while ((e = e.next) != null);\n        if ((tab[index] = hd) != null)\n            hd.treeify(tab);\n    }\n}\n")),(0,l.kt)("h2",{id:"resize\u65b9\u6cd5"},"resize()\u65b9\u6cd5"),(0,l.kt)("p",null,"\u6269\u5145\u6570\u7ec4\u957f\u5ea6\u65b9\u6cd5",(0,l.kt)("strong",{parentName:"p"},"resize"),"\uff0c\u4f1a\u5c06\u6574\u4e2amap\u4e2d\u7684k-v\u5bf9\u91cd\u65b0\u6563\u5217\u5b58\u50a8\uff0c\u4f1a\u6d88\u8017\u6027\u80fd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'final Node<K,V>[] resize() {\n    Node<K,V>[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    if (oldCap > 0) {\n        // MAXIMUM_CAPACITY = 1 << 30 = 1073741824\n        // Integer.MAX_VALUE = (1 << 31) - 1 = 2147483647\n        // \u5982\u679c\u5df2\u7ecf\u5230\u4e86\u6700\u5927\u5bb9\u91cf\u4e86\uff0c\u90a3\u4e48\u5c31\u8c03\u6574\u6269\u5bb9\u7684threshold\u9608\u503c\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        // DEFAULT_INITIAL_CAPACITY = 1 << 4\n        // \u5426\u5219\u7684\u8bdd\uff0c\u5982\u679c\u5c06\u76ee\u524d\u7684\u5bb9\u91cf\u6269\u51452\u500d\u8fd8\u5728\u5141\u8bb8\u8303\u56f4\u4e4b\u5185\uff0c\u5219\u5c06\u5bb9\u91cf\n        // \u6269\u5145\u4e3a\u539f\u6765\u7684\u4e24\u500d\uff0c\u5e76\u4e14\u9608\u503c\u4e5f\u4e3a\u539f\u6765\u7684\u4e24\u500d\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // double threshold\n    }\n    // \u5982\u679c\u539f\u59cb\uff08\u6216\u8005\u521d\u59cb\uff09\u5bb9\u91cf\u4e0d\u5927\u4e8e0\uff0c\u4e14\u4e4b\u524d\u7684\u9608\u503c\u5927\u4e8e0\uff0c\u5219\u5c06\u5bb9\u91cf\u521d\u59cb\u5316\u4e3a\n    // \u4e4b\u524d\u9608\u503c\u7684\u5927\u5c0f\n    else if (oldThr > 0) // initial capacity was placed in threshold\n        newCap = oldThr;\n    else {               // zero initial threshold signifies using defaults\n        // \u6267\u884c\u8fd9\u91cc\u7684\u65b9\u6cd5\u8bf4\u660e\uff0c\u521d\u59cb\u53c2\u6570\u4e2d\u5bb9\u91cf\u5927\u5c0f\u548c\u9608\u503c\u90fd\u4e0d\u5927\u4e8e0\uff0c\u90a3\u4e48\u5c31\u7528\n        // map\u4e2d\u7684\u7f3a\u7701\u503c\n        // DEFAULT_INITIAL_CAPACITY = 1 << 4 = 16\n        // DEFAULT_LOAD_FACTOR = 0.75f\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    // \u5982\u679c\u65b0\u7684\u9608\u503c\u6ca1\u6709\u91cd\u65b0\u8ba1\u7b97\uff0c\u90a3\u4e48\u5148\u7528\u52a0\u8f7d\u56e0\u5b50\u8ba1\u7b97\u51fa\u503c\n    // \u5982\u679c\u65b0\u7684\u5bb9\u91cf\u5927\u5c0f\u548c\u9608\u503c\u5927\u5c0f\u90fd\u672a\u8d85\u8fc7\u9650\u5b9a\u503c\uff0c\u5219\u8ba1\u7b97\u51fa\u7684\u503c\u53ef\u7528\uff0c\u5426\u5219\n    // \u9608\u503c\u5c31\u9650\u5b9a\u4e3a\u5bb9\u91cf\u771f\u6b63\u5141\u8bb8\u7684\u4e0a\u9650\u5373Integer.MAX_VALUE\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                  (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    @SuppressWarnings({"rawtypes","unchecked"})\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    // table\u5df2\u7ecf\u662f\u6269\u5bb9\u597d\u7684\u65b0table\u4e86\n    // \u8001\u7684table\u5b58\u5728\u4e86oldTab\u4e2d\n    table = newTab;\n    // \u4ee5\u4e0b\u5c31\u662f\u4e00\u4e2a\u91cd\u65b0\u6563\u5217\u5b58\u50a8\u7684\u8fc7\u7a0b\u4e86\n    // \u5c06\u8001\u7684tab\u4e2d\u7684node\uff0c\u6309\u7167key\u91cd\u65b0\u6563\u5217\u5f97\u5230\u65b0\u5f97\u5b58\u50a8\u5730\u5740\u6765\u5b58\u50a8\uff0c\n    // \u4ee5\u6b64\u6765\u5b8c\u6210\u6269\u5145\n    if (oldTab != null) {\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                if (e.next == null)\n                    newTab[e.hash & (newCap - 1)] = e;\n                else if (e instanceof TreeNode)\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { // preserve order\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    do {\n                        next = e.next;\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n')))}d.isMDXComponent=!0}}]);